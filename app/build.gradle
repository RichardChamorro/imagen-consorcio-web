defaultTasks 'test'


group 'cl.tsoft'
version '1.0'

repositories {
    mavenCentral()
}


buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.codehaus.gpars:gpars:1.2.1'
    }
}

apply plugin: "java"

sourceCompatibility = 17


compileJava {options.encoding = "UTF-8"}
compileTestJava {options.encoding = "UTF-8"}

dependencies {
    implementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    implementation 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    implementation group: 'io.cucumber', name: 'cucumber-junit', version: '7.14.0'
    implementation group: 'io.cucumber', name: 'cucumber-java', version: '7.14.0'
    implementation group: 'io.cucumber', name: 'cucumber-picocontainer', version: '7.14.0'
    implementation group: 'tech.grasshopper', name: 'extentreports-cucumber7-adapter', version: '1.14.0'
    implementation group: 'com.aventstack', name: 'extentreports', version: '5.1.1'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
    implementation group: 'org.slf4j', name: 'slf4j-reload4j', version: '2.0.12'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.12'
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-remote-driver', version: '4.17.0'
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.17.0'
    implementation("io.github.bonigarcia:webdrivermanager:5.6.3")
    implementation group: 'org.apache.commons', name: 'commons-compress', version: '1.26.0'
    
}

test {
    dependsOn assemble, compileTestJava
    jvmArgs '--enable-preview'
    useJUnitPlatform()
}
configurations {
    cucumberRuntime {
        extendsFrom implementation
    }
}
static def processTestTags(tags) {

    // Dividir las etiquetas en grupos "or" y "and"
    def orTags = tags.split(",").collect { it.trim() }
    def newOrTags = []

    // Procesar cada grupo "or"
    orTags.each { orTag ->
        if (orTag.contains("|")) {
            def andTags = orTag.split("\\|").collect { it.trim() }.join(" and ")
            newOrTags.add("(${andTags})")
        } else {
            newOrTags.add(orTag)
        }
    }

    // Unir los grupos "or" y "and" procesados
    tags = newOrTags.join(" or ")

    return tags
}

def tags = (findProperty('tags') == null) ? 'not @Ignore' : findProperty('tags') + ' and not @Ignore'
def getEnvVar(String name) {
    def value = System.getenv(name)
    if (value != null) {
        return value
    }
    def file = file('.env')
    def envValue = null
    if (file.exists()) {
        file.readLines().each { line ->
            def (envName, envVarValue) = line.split('=')
            if (envName == name) {
                envValue = envVarValue
            }
        }
    }
    return envValue
}
task updateExtentProperties {
    doLast {
        def nav = project.hasProperty('nav') ? project.getProperty('nav') : 'Chrome'

        def propertiesFile = 'src/test/resources/extent.properties'
        def properties = new Properties()

        // Cargamos el archivo extent.properties
        properties.load(new FileInputStream(propertiesFile))

        // Establecemos el valor de "extent.reporter.pdf.out" con el valor de "nav"
        properties.setProperty('extent.reporter.pdf.out', "results/ReporteQA"+nav+".pdf")

        // Guardamos los cambios en el archivo
        properties.store(new FileOutputStream(propertiesFile), null)
    }
}

task runWithCucumber(type: JavaExec) {
    def nav = (findProperty('nav') == null) ? 'Chrome' : findProperty('nav')
    systemProperty "nav", nav
    dependsOn assemble, testClasses
    classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
    mainClass = "io.cucumber.core.cli.Main"
    args = [
            '--plugin', 'pretty',
            '--plugin', 'json:results/Cucumber.json',
            '--plugin', 'com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter:',
            '--glue', 'definitions',
            'src/test/resources/features',
            '--tags', processTestTags(tags),
            '--threads', "1"]
    def env = (findProperty('env') == null) ? 'qa' : findProperty('env')
    def responsive = (findProperty('responsive') == null) ? 'false' : findProperty('responsive')
    systemProperty "responsive", responsive
    systemProperty "env", env
    systemProperty "bs", false
    project.ext.nav = nav
}

runWithCucumber.configure {
    mustRunAfter updateExtentProperties
}

task runWithBS(type: JavaExec) {
    dependsOn assemble, testClasses
    classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
    mainClass = "io.cucumber.core.cli.Main"
    args = [
            '--plugin', 'pretty' ,
            '--plugin', 'json:results/Cucumber.json',
            '--plugin', 'com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter:',
            '--glue', 'definitions',
            'src/test/java/features',
            '--tags', "${tags}"]
    def nav = (findProperty('nav') == null) ? 'ChromeBS' : findProperty('nav') + 'BS'
    def user = getEnvVar('USERKEY')
    def key = getEnvVar('SECRETKEY')
    def env = (findProperty('env') == null) ? 'qa' : findProperty('env')
    def responsive = (findProperty('responsive') == null) ? 'false' : findProperty('responsive')
    systemProperty "responsive", responsive
    systemProperty "env", env
    systemProperty "nav", nav
    systemProperty "bs", true
    systemProperty "user", user
    systemProperty "key", key
    project.ext.nav = nav
}

task runWithCucumberAll {
    doLast {
        def chromeTask = new Thread({
            try {
                new ProcessBuilder()
                        .command('./gradlew', 'runWithCucumber', '-Pnav=Chrome', "-Ptags=${tags}")
                        .inheritIO()
                        .start()
                        .waitFor()
            } catch (Exception e) {
                println("Error executing Chrome task: ${e.message}")
                e.printStackTrace()
            }
        })
        def edgeTask = new Thread({
            try {
                new ProcessBuilder()
                        .command('./gradlew', 'runWithCucumber', '-Pnav=Edge', "-Ptags=${tags}")
                        .inheritIO()
                        .start()
                        .waitFor()
            } catch (Exception e) {
                println("Error executing Edge task: ${e.message}")
                e.printStackTrace()
            }
        })
        def firefoxTask = new Thread({
            try {
                new ProcessBuilder()
                        .command('./gradlew', 'runWithCucumber', '-Pnav=Firefox', "-Ptags=${tags}")
                        .inheritIO()
                        .start()
                        .waitFor()
            } catch (Exception e) {
                println("Error executing Firefox task: ${e.message}")
                e.printStackTrace()
            }
        })
        def safariTask = new Thread({
            try {
                new ProcessBuilder()
                        .command('./gradlew', 'runWithCucumber', '-Pnav=Safari', "-Ptags=${tags}")
                        .inheritIO()
                        .start()
                        .waitFor()
            } catch (Exception e) {
                println("Error executing Safari task: ${e.message}")
                e.printStackTrace()
            }
        })
        safariTask.start()
        chromeTask.start()
        edgeTask.start()
        firefoxTask.start()
        safariTask.join()
        chromeTask.join()
        edgeTask.join()
        firefoxTask.join()

    }
}

